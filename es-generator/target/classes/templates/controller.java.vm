package ${package.Controller};

import org.springframework.validation.annotation.Validated;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import com.fengling.core.api.ApiResult;
import com.fengling.core.api.controller.BaseController;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.web.bind.annotation.*;
#if(${restControllerStyle})
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;
#else
import org.springframework.stereotype.Controller;
#end
#if(${superControllerClassPackage})
import ${superControllerClassPackage};
#end
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.GetMapping;

import ${package.Service}.${table.serviceName};
import ${package.Entity}.${entity};

/**
 * <p>
 * $!{table.comment} 前端控制器
 * </p>
 *
 * @author ${author}
 * @since ${date}
 */
#if(${restControllerStyle})
@RestController
#else
@Controller
#end
@RequestMapping("#if(${package.ModuleName})/${package.ModuleName}#end/#if(${controllerMappingHyphenStyle})${controllerMappingHyphen}#else${table.entityPath}#end")
@Validated
@Api(description = "$!{table.comment}接口")
#if(${superControllerClass})
public class ${table.controllerName} extends ${superControllerClass} {
#else
public class ${table.controllerName} extends BaseController {
#end

    private static final Logger logger = LoggerFactory.getLogger(${table.controllerName}.class);

    @Autowired
    public ${table.serviceName} ${entity}Service;

    /**
     * 列表查询
     * @param request
     * @return
     */
    @ApiOperation("列表查询")
    @RequestMapping(method = RequestMethod.GET, value = {"/list.do"})
    public ApiResult<List<${entity}>> list(HttpServletRequest request){
        return ApiResult.success(${entity}Service.list());
    }

    /**
     * 分页查询数据
     *
     * @param pn  当前页
     * @param size  每页行数
     * @param model 查询条件
     * @return
     */
    @ApiOperation("分页查询")
    @ResponseBody
    @GetMapping("/getPageList.do")
    public ApiResult<Page<${entity}>> getPageList(@RequestParam(value = "pn",defaultValue = "1") Integer pn, @RequestParam(value = "size",defaultValue = "20") Integer size, Model model){
        Page<${entity}> result = null;
        try{
            result = ${entity}Service.page(new Page<>(pn, size));
        }catch(Exception e){
            logger.error("get${entity}List -=- {}" ,e.toString());
        }
        return ApiResult.success(result);
    }

    /**
     * 新增用户
     * @param request
     * @param response
     * @param model
     * @return
     */
    @ApiOperation("新增")
    @RequestMapping(method = RequestMethod.GET, value = "/save.do")
    public boolean save (HttpServletRequest request,HttpServletResponse response,Model model) {
        try{
            ${entity} mo = new ${entity}();
            BeanUtils.copyProperties(model, mo);
            return ${entity}Service.saveOrUpdate(mo);
        }catch(Exception ex){
            logger.error("${table.entityPath} save -=- {}" ,ex.toString());
        }
        return false;
    }

    /**
     * 修改用户信息
     * @param request
     * @param id  实体ID
     * @return
     */
    @ApiOperation("编辑")
    @RequestMapping(method = RequestMethod.GET, value = "/modify.do")
    public boolean modify(HttpServletRequest request, Long id, Model model){
        try{
            ${entity} mo = new ${entity}();
            BeanUtils.copyProperties(model, mo);
            return ${entity}Service.saveOrUpdate(mo);
        }catch(Exception ex){
            logger.error("${table.entityPath} Update -=- {}" ,ex.toString());
        }
        return false;
    }

    /**
     * 保存和修改公用的
     * @param ${table.entityPath}
     * @return 0 失败  1 成功
     */
    @ApiOperation("新增或编辑")
    @ResponseBody
    @RequestMapping(method = RequestMethod.POST, value = "/saveOrUpdate.do")
    public int saveOrUpdate (${entity} ${table.entityPath}){
        int count=0;
        try{
            count = ${entity}Service.saveOrUpdate(${table.entityPath}) ? 1:0;
        }catch(Exception e){
            logger.error("${table.entityPath} saveOrUpdate -=- {}" ,e.toString());
        }
        return count;
    }

    /**
     * 根据id删除对象
     * @param id  实体ID
     * @return 0 失败  1 成功
     */
    @ApiOperation("根据id删除")
    @ResponseBody
    @RequestMapping(method = RequestMethod.POST, value = "/delete.do")
    public int delete (Long id){
        int count=0;
        try{
            count = ${entity}Service.getBaseMapper().deleteById(id);
        }catch(Exception e){
            logger.error("${table.entityPath} Delete -=- {}" ,e.toString());
        }
        return count;
    }

    /**
     * 批量删除对象
     * @param ids 实体集合ID
     * @return  0 失败  1 成功
     */
    @ApiOperation("批量删除")
    @ResponseBody
    @RequestMapping(method = RequestMethod.POST, value = "/batchDelete.do")
    public int batchDelete(List<Long> ids){
        int count=0;
        try{
            count = ${entity}Service.getBaseMapper().deleteBatchIds(ids);
        }catch(Exception e){
            logger.error("${table.entityPath} BatchDelete -=- {}" ,e.toString());
        }
        return count;
    }
}